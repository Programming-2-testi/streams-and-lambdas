package part03;

import java.util.List;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;

public class ObjectStreams {

    /**
     * "Record classes, which are a special kind of class, help to model plain data
     * aggregates with less ceremony than normal classes."
     *
     * @see https://docs.oracle.com/en/java/javase/17/language/records.html
     */
    record Product(String name, double price) {
    }

    // List of products generated by ChatGPT, (GPT-3.5). Do *NOT* modify this list.
    private final List<Product> products = List.of(
            new Product("Code Editor Pro", 99.99),
            new Product("Software Development Book", 39.99),
            new Product("Debugging Toolkit", 49.99),
            new Product("Version Control System", 299.99),
            new Product("Code Review Tool", 19.99),
            new Product("Integrated Development Environment", 199.99),
            new Product("API Documentation Generator", 59.99),
            new Product("Bug Tracking System", 149.99),
            new Product("Code Quality Analyzer", 79.99),
            new Product("Continuous Integration Server", 199.99),
            new Product("Project Management Software", 249.99),
            new Product("Software Testing Suite", 119.99),
            new Product("Database Management Tool", 179.99),
            new Product("Source Code Repository", 99.99),
            new Product("Code Obfuscation Tool", 69.99),
            new Product("Performance Profiler", 149.99),
            new Product("UML Diagram Generator", 79.99),
            new Product("Software Deployment Pipeline", 199.99),
            new Product("Code Collaboration Platform", 29.99),
            new Product("Code Repository Hosting Service", 9.99));

    /**
     * Create a stream from the `products` list and return it.
     *
     * @return
     */
    public Stream<Product> streamProducts() {
        return products.stream();
    }

    /**
     * Use `filter` to only include products that have a lower or equal price than
     * given.
     *
     * @param priceLimit
     * @return
     */
    public Stream<Product> streamInexpensiveProducts(double priceLimit) {
        return streamProducts().filter(p -> p.price <= priceLimit);
    }

    /**
     * Use `map` to create a new stream with just the name of each product.
     */
    public Stream<String> streamProductNames() {
        return streamProducts().map(p -> p.name);
    }

    /**
     * Use `mapToDouble` to create a new stream with just the price of each product.
     */
    public DoubleStream streamPrices() {
        return streamProducts().mapToDouble(p -> p.price);
    }

}
